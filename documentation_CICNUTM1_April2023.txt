Each section contains a header describing the block, followed by the code itself, in this format:

----------------------
Header 
---
Code block
---
----------------------

Tools used:
STAR (2.7.10b)
MultiQC (1.13)
samtools (1.17)
fastqc (0.11.9)



Contact cuyler.luck@ucsf.edu or ross.okimoto@ucsf.edu with questions.



----------------------
We first need to download a reference genome in FASTA format and genome annotation file in GTF format from ENSEMBL. Here we downloaded GRCh38.p13, or release 108, from the ENSEMBL FTP server. We previously downloaded these, but if you need to download these you can use wget and expand the compressed files using gzip.
---
wget https://ftp.ensembl.org/pub/release-108/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz

wget https://ftp.ensembl.org/pub/release-108/gtf/homo_sapiens/Homo_sapiens.GRCh38.108.gtf.gz

gzip -d Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz

gzip -d Homo_sapiens.GRCh38.108.gtf.gz
---
----------------------


----------------------
We next need to create an index for STAR to use based on the reference genome FASTA and GTF files. We chose to use --sjdbOverhang 149 because we had reads of length 150bp, and the recommendation from the STAR manual is to use max(ReadLength)-1. 

We have done this for a previous project so we don't need to rerun this, but here's how you could do it:
---
star_index.sh =

#!/bin/bash           # the shell language when run outside of the job scheduler
#                     # lines starting with #$ is an instruction to the job scheduler
#$ -S /bin/bash       # the shell language when run via the job scheduler [IMPORTANT]
##$ -cwd               # job should run in the current working directory (disabled)
#$ -j n               # STDERR and STDOUT should be joined
#$ -l mem_free=16G     # job requires up to 16 GiB of RAM per slot
#$ -l scratch=200G      # job requires up to 200 GiB of local /scratch space
##$ -l h_rt=3:00:00   # job requires up to 3 hours of runtime (disabled)
#$ -r n               # if job crashes, it should not be restarted

module load CBI star

STAR --runThreadN "${NSLOTS:-1}" --runMode genomeGenerate --genomeDir ./star_index --genomeFastaFiles ./Raw/Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa --sjdbGTFfile ./Raw/Homo_sapiens.GRCh38.108.gtf --sjdbOverhang 149

## End-of-job summary, if running as a job
[[ -n "$JOB_ID" ]] && qstat -j "$JOB_ID"
---
Submit job in NicoleMar2023 directory with:
qsub -pe smp 8 -cwd -m bea star_index.sh
----------------------


----------------------
Next, we can perform STAR alignment of all samples, one at a time. After generating an alignment as a .sam file, we converted to a .bam file using samtools and then deleted the .sam file due to disk space limitations.
We used --quantMode GeneCounts to extract gene counts at the same time as alignment was performed.
I am also generating a FASTQC report for the fastq files at the same time, for quality control.
Also having samtools index the .bam files.

Run in home directory with:
qsub -pe smp 8 -cwd -m bea star_all_samples_cicnutm1.sh
---
#!/bin/bash           # the shell language when run outside of the job scheduler
#                     # lines starting with #$ is an instruction to the job scheduler
#$ -S /bin/bash       # the shell language when run via the job scheduler [IMPORTANT]
##$ -cwd               # job should run in the current working directory (disabled)
#$ -j n               # STDERR and STDOUT should be joined
#$ -l mem_free=16G     # job requires up to 16 GiB of RAM per slot
#$ -l scratch=200G      # job requires up to 200 GiB of local /scratch space
##$ -l h_rt=3:00:00   # job requires up to 3 hours of runtime (disabled)
#$ -r n               # if job crashes, it should not be restarted

module load CBI star samtools fastqc

for sample in A1 A2 A3 B1 B2 B3 C1 C2 C3 D1 D2 D3 
do
	STAR --runThreadN "${NSLOTS:-1}" --genomeDir ./NicoleMar2023/star_index --readFilesIn ./CuylerCICNUTM1_Apr2023/RawData/${sample}_1.fq.gz ./CuylerCICNUTM1_Apr2023/RawData/${sample}_2.fq.gz --readFilesCommand zcat --outFileNamePrefix ./CuylerCICNUTM1_Apr2023/alignments/star/$sample --quantMode GeneCounts
	samtools sort -@ "${NSLOTS:-1}" -o ./CuylerCICNUTM1_Apr2023/alignments/star/$sample.bam ./CuylerCICNUTM1_Apr2023/alignments/star/*.sam
	rm ./CuylerCICNUTM1_Apr2023/alignments/star/*.sam
	samtools index -b -@ "${NSLOTS:-1}" ./CuylerCICNUTM1_Apr2023/alignments/star/$sample.bam
	fastqc ./CuylerCICNUTM1_Apr2023/RawData/${sample}_1.fq.gz ./CuylerCICNUTM1_Apr2023/RawData/${sample}_2.fq.gz
done

## End-of-job summary, if running as a job
[[ -n "$JOB_ID" ]] && qstat -j "$JOB_ID"
---
----------------------


----------------------
Combining FASTQC reports with MultiQC
(Run in directory that contains all *_fastqc.zip reports)
---

Command format:

multiqc .
---
----------------------

----------------------
Notes on QC
---

Almost all samples look good (good FASTQC reports and >90% unique mapping rates) except C1, which has a not great FASTQC report (abnormally high GC content, slightly lower quality, much higher adapter content for some reason some significant % of reads with polyg, and low unique mapping % (64.60%)). I will drop it in the analysis.

Unique mapped reads is in Log.final.out files from STAR, not FASTQC report.

---
----------------------


